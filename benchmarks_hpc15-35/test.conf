
#data_filename = matrix/nod1e6_sten10.mtx
data_filename = x_weights_direct__no_hv_stsize_10_0d_10x_10y_1z.bmtx

// set with env variable CL_KERNELS
// kernel_path = /mnt/global/LCSE/gerlebacher/src/clSpMV_MIC/kernels"

// bool asci_binary;
asci_binary = binary

//	std::string type; // float/double
string_type = double

// std::string cpu_processor;  (not sure)
process = Xeon

// int nb_cores;
nb_cores = 240

//nb_cpu_sockets  = unknown

// MIC, K20, TESLA, CPU
co_processor = MIC

// READ MM (Matrix Market) or ELL (Ellpack) format
/// ELL_MULTI (several multidomains in ELL format.
in_format = MM
in_format = ELL_MULTI
in_format = ELL

// COMPACT, RANDOM, RANDOM_WITH_DIAG, RANDOMDIAGS, SUPERCOMPACT
// RANDOMDIAGS: real diagonals, randoly distributed. Should be very efficient in all cases on 
// a cache-based system like the phi
sparsity = RANDOM_WITH_DIAG
sparsity = RANDOM_DIAGS
// first nz elements of each row are 0 to nz-1 (always the same). Sorted. 
// no restructuring of col_id
sparsity = RANDOM
sparsity = COMPACT # 137GF
sparsity = SUPERCOMPACT 
sparsity = NONE

// use_subdomains : 0 to join the subdomains, else do nb_subdomains spmvs
use_subdomains = 0

// If set to 0, the random number sequence is identical for each run
random_seed = 1

// separation between outer diagonal and center diagonal
diag_sep = -1
diag_sep = 80000

// Sort or not the random diagonal element in the index array col_id
sort_col_indices = 0

// non-zero matrix elements are contained within center width
inner_bandwidth = 2000

// average size of a 3D grid, along a cube's edge. 
n3d = 128

nb_nodes_per_stencil = 32;

// grid size: square matrices)
// obtained from input file
// nb_nodes = 1000000

// int reordering; // Cuthill-McGee, space-filling (which type)
// not used for now

// determined inside the program
// int sparse_format; // ELL, SeLL, SBELL, BELL, CVR

// not used (for OpenCL or CUDA)
workgroup_size = 128

// true or false. If true, read amore data from bench.conf
USE_PYTHON_SCRIPT = 1


# used for bandwidth measurements
#  write, read, read_write, gather, unpack, read_write_cpp, gather_cpp
bandwidth_experiment = write

#  compact, reverse, random
col_id_type = compact

# number of threads
num_threads=1
